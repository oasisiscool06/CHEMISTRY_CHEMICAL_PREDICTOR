# -*- coding: utf-8 -*-
"""Chemistry_predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cpqQuMJouqWJ-jf0AsFkWdGBy9oytb7S
"""


# !pip uninstall opencv-python
# !pip install opencv-python==4.5.4.60 easyocr

# !pip install wikipedia
# !pip install chemicals

# !sudo apt install tesseract-ocr
# !pip install pytesseract
# !pip install easyocr

from PIL import Image
import easyocr



#image = tf.keras.preprocessing.image.array_to_img(Image.open(""))

def engine_1():
        path=input("Enter path to image: ")
        import easyocr
        reader = easyocr.Reader(['en'])
        img_text = reader.readtext(path)
        final_text = ""
        for _, text, __ in img_text: # _ = bounding box, text = text and __ = confident level
            final_text += " "
            final_text += text
        def Convert(string):
              li = list(string.split(" " or "-->" or "--" or "-" or ">" or "+"))
              return li
        str1 = final_text
        conv = Convert(str1)
        print(conv[-1])
        from chemicals import CAS_from_any, MW, Tb, Tm, Tc, Pc, Vc, Hfus, Hfs, Hfl, Hfg, S0s, S0l, S0g
        try:
          CAS_water = CAS_from_any(conv[-1])
          print("\x1B[1;4m"+"INFORMATION OF FIRST PRODUCT:"+"\x1B[0m")
          print(f"Molecular weight: {MW(CAS_water)}")   # Molecular weight [g/mol8.01528
          print(f"Normal boiling point[K]: {Tb(CAS_water)}")   # Normal boiling point [K]
          print(f"Melting point [K]: {Tm(CAS_water)}")  # Melting point [K]
          print(f"Critical temperature [K]: {Tc(CAS_water)}")   # Critical temperature [K]
          print(f"Critical pressure [Pa]: {Pc(CAS_water)}")  , # Critical pressure [Pa]
          print(f"Critical volume [m^3/mol]: {Vc(CAS_water)}")   ,# Critical volume [m^3/mol]
          print(f"Heat of fusion [J/mol]: {Hfus(CAS_water)}") , # 
          print(f"Liquid heat of formation [J/mol]: {Hfl(CAS_water)}") ,# Liquid heat of formation [J/mol]
          print(f"Gas heat of formation [J/mol]: {Hfg(CAS_water)}")  ,# Gas heat of formation [J/mol]
          print(f"Absolute liquid enthalpy of formation [J/mol/K]: {S0l(CAS_water)}")  ,# Absolute liquid enthalpy of formation [J/mol/K]
          print(f"Absolute gas enthalpy of formation [J/mol/K]: {S0g(CAS_water)}\n") # Absolute gas enthalpy of formation [J/mol/K]
        except Exception:
            pass
            print("Couldn't find reaction \n")

        try:
            CAS_water1 = CAS_from_any(conv[-2])
            print("\x1B[1;4m"+"INFORMATION OF SECOND PRODUCT:"+"\x1B[0m")
            print(f"Molecular weight: {MW(CAS_water1)}")   # Molecular weight [g/mol8.01528
            print(f"Normal boiling point: {Tb(CAS_water1)}")   # Normal boiling point [K]
            print(f"Melting point [K]: {Tm(CAS_water1)}")  # Melting point [K]
            print(f"Critical temperature [K]: {Tc(CAS_water1)}")   # Critical temperature [K]
            print(f"Critical pressure [Pa]: {Pc(CAS_water1)}")  , # Critical pressure [Pa]
            print(f"Critical volume [m^3/mol]: {Vc(CAS_water1)}")   ,# Critical volume [m^3/mol]
            print(f"Heat of fusion [J/mol]: {Hfus(CAS_water1)}") , # 
            print(f"Liquid heat of formation [J/mol]: {Hfl(CAS_water1)}")  ,# Liquid heat of formation [J/mol]
            print(f"Gas heat of formation [J/mol]: {Hfg(CAS_water1)}")  ,# Gas heat of formation [J/mol]
            print(f"Absolute liquid enthalpy of formation [J/mol/K]: {S0l(CAS_water1)}")  ,# Absolute liquid enthalpy of formation [J/mol/K]
            print(f"Absolute gas enthalpy of formation [J/mol/K]: {S0g(CAS_WATER1)} \n") # Absolute gas enthalpy of formation [J/mol/K]

        except Exception:
            pass
            print("\x1B[1;4m"+"NO SECOND PRODUCT:"+"\x1B[0m")

        print("\x1B[1;4m"+"INFORMATION FROM WIKIPEDIA"+"\x1B[0m")
          # Import package
        import wikipedia

          # Specify the title of the Wikipedia page
        nconv = conv[-1]
          # Extract the plain text content of the page
        try:
              wiki = wikipedia.page(nconv)
              text = wiki.content()
              nconv1 = conv[-2]
        except Exception:
            pass
            print("!!No sources from wikipedia about 1st product from wikipedia!!")
            

          # Extract the plain text content of the page
        try:
              wiki = wikipedia.page(nconv1)
              text = wiki.content()
        except Exception:
            pass
            print("!!No sources from wikipedia about 2nd product from wikipedia!!\n")

          # <form class="search-form"     
          # action="http://services.runescape.com/m=itemdb_rs/results#main-search" method="post">
          # <input class="text" placeholder="Search..." name="query" required="" type="search"> 
          # <input class="search-submit" value="Search" type="submit">

        print("\x1B[1;4m"+"SOME RESOURCES ABOUT 1ST PPRODUCT:"+"\x1B[0m")
        try:
              from googlesearch import search
        except ImportError:
              print("No module named 'google' found")
          
          # to search
        query = conv[-1]
        try:
            for j in search(query, tld="co.in", num=10, stop=10, pause=2):
                  print(j)
        except Exception:
            pass
            print("!!Couldn't find any!!\n")

        print("\x1B[1;4m"+"SOME RESOURCES ABOUT 2ND PPRODUCT:"+"\x1B[0m")
        try:
              from googlesearch import search
        except ImportError:
              print("No module named 'google' found")
          
          # to search
        
        try:
            query = conv[-2]
            for j in search(query, tld="co.in", num=10, stop=10, pause=2):
                  print(j)
        except Exception:
            pass
            print("!!Couldn't find any!!")

        import warnings
        warnings.filterwarnings("ignore")

import warnings
warnings.filterwarnings("ignore")

# Driver code
def engine_2():
              import pytesseract
              import shutil
              import os
              import random
              try:
                  from PIL import Image
              except ImportError:
                  import Image
              image_path_in_colab=input("Enter path to image: ")
              extractedInformation = pytesseract.image_to_string(Image.open(image_path_in_colab))
              def Convert(string):
                    li = list(string.split(" " or "-->" or "--" or "-" or ">" or "+"))
                    return li
              str1 = extractedInformation
              conv = Convert(str1)
              print(conv[-1])
              

              from chemicals import CAS_from_any, MW, Tb, Tm, Tc, Pc, Vc, Hfus, Hfs, Hfl, Hfg, S0s, S0l, S0g
              try:
                CAS_water = CAS_from_any(conv[-1])
                print("\x1B[1;4m"+"INFORMATION OF FIRST PRODUCT:"+"\x1B[0m")
                print(f"Molecular weight: {MW(CAS_water)}")   # Molecular weight [g/mol8.01528
                print(f"Normal boiling point[K]: {Tb(CAS_water)}")   # Normal boiling point [K]
                print(f"Melting point [K]: {Tm(CAS_water)}")  # Melting point [K]
                print(f"Critical temperature [K]: {Tc(CAS_water)}")   # Critical temperature [K]
                print(f"Critical pressure [Pa]: {Pc(CAS_water)}")  , # Critical pressure [Pa]
                print(f"Critical volume [m^3/mol]: {Vc(CAS_water)}")   ,# Critical volume [m^3/mol]
                print(f"Heat of fusion [J/mol]: {Hfus(CAS_water)}") , # 
                print(f"Liquid heat of formation [J/mol]: {Hfl(CAS_water)}") ,# Liquid heat of formation [J/mol]
                print(f"Gas heat of formation [J/mol]: {Hfg(CAS_water)}")  ,# Gas heat of formation [J/mol]
                print(f"Absolute liquid enthalpy of formation [J/mol/K]: {S0l(CAS_water)}")  ,# Absolute liquid enthalpy of formation [J/mol/K]
                print(f"Absolute gas enthalpy of formation [J/mol/K]: {S0g(CAS_water)}\n") # Absolute gas enthalpy of formation [J/mol/K]
              except Exception:
                  pass
                  print("Couldn't find reaction \n")

              try:
                  CAS_water1 = CAS_from_any(conv[-2])
                  print("\x1B[1;4m"+"INFORMATION OF SECOND PRODUCT:"+"\x1B[0m")
                  print(f"Molecular weight: {MW(CAS_water1)}")   # Molecular weight [g/mol8.01528
                  print(f"Normal boiling point: {Tb(CAS_water1)}")   # Normal boiling point [K]
                  print(f"Melting point [K]: {Tm(CAS_water1)}")  # Melting point [K]
                  print(f"Critical temperature [K]: {Tc(CAS_water1)}")   # Critical temperature [K]
                  print(f"Critical pressure [Pa]: {Pc(CAS_water1)}")  , # Critical pressure [Pa]
                  print(f"Critical volume [m^3/mol]: {Vc(CAS_water1)}")   ,# Critical volume [m^3/mol]
                  print(f"Heat of fusion [J/mol]: {Hfus(CAS_water1)}") , # 
                  print(f"Liquid heat of formation [J/mol]: {Hfl(CAS_water1)}")  ,# Liquid heat of formation [J/mol]
                  print(f"Gas heat of formation [J/mol]: {Hfg(CAS_water1)}")  ,# Gas heat of formation [J/mol]
                  print(f"Absolute liquid enthalpy of formation [J/mol/K]: {S0l(CAS_water1)}")  ,# Absolute liquid enthalpy of formation [J/mol/K]
                  print(f"Absolute gas enthalpy of formation [J/mol/K]: {S0g(CAS_WATER1)} \n") # Absolute gas enthalpy of formation [J/mol/K]

              except Exception:
                  pass
                  print("\x1B[1;4m"+"NO SECOND PRODUCT:"+"\x1B[0m")

              print("\x1B[1;4m"+"INFORMATION FROM WIKIPEDIA"+"\x1B[0m")
                # Import package
              import wikipedia

                # Specify the title of the Wikipedia page
              nconv = conv[-1]
                # Extract the plain text content of the page
              try:
                    wiki = wikipedia.page(nconv)
                    text = wiki.content()
                    nconv1 = conv[-2]
              except Exception:
                  pass
                  print("!!No sources from wikipedia about 1st product from wikipedia!!")
                  

                # Extract the plain text content of the page
              try:
                    wiki = wikipedia.page(nconv1)
                    text = wiki.content()
              except Exception:
                  pass
                  print("!!No sources from wikipedia about 2nd product from wikipedia!!\n")

                # <form class="search-form"     
                # action="http://services.runescape.com/m=itemdb_rs/results#main-search" method="post">
                # <input class="text" placeholder="Search..." name="query" required="" type="search"> 
                # <input class="search-submit" value="Search" type="submit">

              print("\x1B[1;4m"+"SOME RESOURCES ABOUT 1ST PPRODUCT:"+"\x1B[0m")
              try:
                    from googlesearch import search
              except ImportError:
                    print("No module named 'google' found")
                
                # to search
              query = conv[-1]
              try:
                  for j in search(query, tld="co.in", num=10, stop=10, pause=2):
                        print(j)
              except Exception:
                  pass
                  print("!!Couldn't find any!!\n")

              print("\x1B[1;4m"+"SOME RESOURCES ABOUT 2ND PPRODUCT:"+"\x1B[0m")
              try:
                    from googlesearch import search
              except ImportError:
                    print("No module named 'google' found")
                
                # to search
              
              try:
                  query = conv[-2]
                  for j in search(query, tld="co.in", num=10, stop=10, pause=2):
                        print(j)
              except Exception:
                  pass
                  print("!!Couldn't find any!!")

              import warnings
              warnings.filterwarnings("ignore")

text = input("What engine do you want to use: ")
if text == "1":
  engine_1()
elif text == "2":
  engine_2() 
else:
  print("Invalid engine")


